import { AdjustmentsContainer, Grid, ProductsContainer } from "@/styles/home";
import { findProductByName } from "@/services/search";

import ProductCard from "@/components/home/ProductCard";
import PageSelect from "@/components/home/PageSelect";
import Filter from "@/components/home/Filter";
import PageHead from "@/components/global/PageHead";

// A fakestoreapi não tem um endpoint que especifica o total de produtos. 
// No site da documentação (https://fakestoreapi.in/docs) está dizendo que são 150. 
// Vou colocar estático no código mas o ideal seria que a api retornasse essa informação.
const TOTAL_PRODUCTS = 150; 

const PRODUCTS_PER_PAGE = 30;
const LOADING_PRIORITY = 4;

export async function getServerSideProps({ query }) {
  const currentPage = parseInt(query.page) || 1;
  const productName = query.name || null;
  const category = query.category || null;
  var productsResponse;

  if (category){
    productsResponse = await fetch(`https://fakestoreapi.in/api/products/category?type=${category}`)
  }
  else{
    productsResponse = await fetch(`https://fakestoreapi.in/api/products?limit=${TOTAL_PRODUCTS}`);
  }

  const categoryResponse = await fetch("https://fakestoreapi.in/api/products/category");

  const { products } = await productsResponse.json();
  const { categories } = await categoryResponse.json();

  const productsFound = productName ? findProductByName(productName, products) : products;

  // Na página 1, pega de [0 a 30], na página 2, pega de [30, 60], assim por diante... 
  const currentPageProducts = productsFound.slice((currentPage-1) * PRODUCTS_PER_PAGE, (currentPage * PRODUCTS_PER_PAGE));

  return {
    props: {
      currentPageProducts,
      categories,
      currentPage,
      productTotalQtd: productsFound.length
    }
  };
}

export default function Home({ currentPageProducts, categories, currentPage, productTotalQtd }) {
  const pageCount = Math.ceil(productTotalQtd / PRODUCTS_PER_PAGE);

  return (
    <>
      <PageHead title="MySide | E-commerce" description={"Generated by create next app"}/>
      
      <AdjustmentsContainer>
        <h3>{`${productTotalQtd} products found`}</h3>
        <Filter categories={categories}/>
      </AdjustmentsContainer>
      <ProductsContainer>
        <Grid>
          { currentPageProducts.map(({id, title, description, image, price, discount}, index) => {
            // Carrega mais rápido as imagens que vão aparecer primeiro, as outras ficam com lazy loading
            if(index <=  LOADING_PRIORITY){
              return <ProductCard key={id} id={id} title={title} description={description} image={image} price={price} discount={discount} priority={true}/>
            }

            return <ProductCard key={id} id={id} title={title} description={description} image={image} price={price} discount={discount}/>
          })}
        </Grid>
      </ProductsContainer>

      <PageSelect currentPage={currentPage} pageCount={pageCount}/>
    </>
  );
}
