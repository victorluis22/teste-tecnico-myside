import { AdjustmentsContainer, Grid, ProductsContainer } from "@/styles/home";

import Head from "next/head";
import ProductCard from "@/components/home/ProductCard";
import PageSelect from "@/components/home/PageSelect";
import Filter from "@/components/home/Filter";
import { useState } from "react";

// A fakestoreapi não tem um endpoint que especifica o total de produtos. 
// No site da documentação (https://fakestoreapi.in/docs) está dizendo que são 150. 
// Vou colocar estático no código mas o ideal seria que a api retornasse essa informação.
const TOTAL_PRODUCTS = 150; 
const PRODUCTS_PER_PAGE = 30;

export async function getServerSideProps({ query }) {
  const category = query.category ?? null;
  var productsResponse;

  if (category){
    productsResponse = await fetch(`https://fakestoreapi.in/api/products/category?type=${category}`)
  }
  else{
    productsResponse = await fetch(`https://fakestoreapi.in/api/products?&limit=${TOTAL_PRODUCTS}`);
  }

  const categoryResponse = await fetch("https://fakestoreapi.in/api/products/category");

  const { products } = await productsResponse.json();
  const { categories } = await categoryResponse.json();

  return {
    props: {
      products,
      categories
    }
  };
}

export default function Home({ products, categories }) {
  const [currentPage, setCurrentPage] = useState(1);
  const pageCount = Math.ceil(products.length / PRODUCTS_PER_PAGE);

  // Na página 1, pega de [0 a 30], na página 2, pega de [30, 60], assim por diante... 
  const pageProducts = products.slice((currentPage-1) * PRODUCTS_PER_PAGE, (currentPage * PRODUCTS_PER_PAGE))
  
  return (
    <>
      <Head>
        <title>MySide | E-commerce</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <AdjustmentsContainer>
        <h3>{`${products.length} products found`}</h3>
        <Filter categories={categories}/>
      </AdjustmentsContainer>
      <ProductsContainer>
        <Grid>
          { pageProducts.map(({id, title, description, image, price, discount}) => [
            <ProductCard key={id} id={id} title={title} description={description} image={image} price={price} discount={discount}/>
          ])}
        </Grid>
      </ProductsContainer>

      <PageSelect currentPage={currentPage} pageCount={pageCount} onPageChange={setCurrentPage}/>
    </>
  );
}
